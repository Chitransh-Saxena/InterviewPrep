
Requirements
    -> Functional
        -> Stream videos
            -> What quality (are we supporting multiple qualities?)
            -> Speed and all won't be part of requirement I suppose.
                -> But still understand that.
        -> Upload videos
        -> Search videos according to titles, artist names etc.
        -> Like and Dislike videos
        -> Add comments to video
        -> View thumbnails
    -> Non-Functional Requirements
        -> High Availability
        -> Scalability
        -> Good Performance
        -> Reliability
            -> Content uploaded should not be lost or damaged
        -> Consistency
            -> At some places, a strong consistency is not required
            -> Notification to subscribers at video upload, if not all get notification at the same time, then too it is fine

Interview Begins

-> Understand the functional requirements, and segregate them on the basis of service
-> Primarily, two are major requirements
    -> Stream video
    -> Upload video
-> Once videos are uploaded, following functionalities are expected from the system
    -> Search videos by titles
    -> Like and Dislike videos
    -> Add comments
    -> View Thumbnails


-> A lot of data is uploaded to youtube every minute, we need to understand the data and take storage and such decisions for these services
    -> Resource Estimation
        -> Total number of current users = 1.5 billion
        -> Daily Active Users (DAU) = 500 million
        -> Average length of videos = 5 mins
        -> Uploads and Downloads estimation = 500 hours of content per minute (example at YouTube's scale)
        -> Size of an average video before processing = Around 600 MB (this is vague number, because qualtiies can be 4k, 720p etc.)
            -> Based on different resolutions, we will encode the videos
            -> Size should of a 600 MB video should come down to 30-50 MB approx.

        -> Discussion on size of video, resolution and compression (Codecs)
            -> If a video is 1080p quality, each pixel in the frame will account for some data
            -> For a 1080p video, there would be 1920 X 540 pixels  = 10,36,800 (these could vary)
            -> So, we need not save all the pixels, because many pixels there would be same (Showing a black color 10000 times is slower than just writing black: 10,000)
                -> Now this is just 1 frame, we run at 60FPS or more, we are talking about 10,36,800 pixels X 60 frames per second of data.
            -> We have several compression algorithms in market
                -> Not going in depth of these algorithms
                -> But we can get lossless or lossy compressions.
            -> This category of software is called codecs.


        -> Coming back to size and storage estimation
            -> An average video of size 600 mb, post compression becomes 30 mb of length 5 minutes.
                -> Each video is of 30 MB = 30 / 5 = 6 MB of storage for each minute of video (for a 5 minute vide)
            -> We have 500 hours of content streaming per minute
                -> ( 500 * 60 ) minutes of content streaming per minute.
                -> Total upload per minute = 500 * 60 * 6 = 1,80,000 MB of storage is required each minute (180 GB) and this is post compression
                    -> We will be storing multiple qualities, so multiply the above number with total number of qualities in which we are storing.
                    -> Maths will vary for different qualities, for now, taken the numbers as same
                -> Videos will be stored in Blob storage like Amazon S3 or Azure Blob Storage

            -> For Bandwidth calculation (For upload)
                -> 500 hours of data (Upload) * connection speed = Required bandwidth
                -> ( 500 * 60 ) * (50 MB per minute (assuming a medium speed connection)) = 200 GBPS
                -> For Download bandwidth, calculate

            -> Number of servers = Number of Active Users / RPS = 500 million DAU / 80,000 (Standard RPS of an industry grade server)
                -> RPS of a server could vary, that has to be calculated based on server resources and approx query time of an endpoint



    -> API Design
        -> Stream Video
            -> Stream and upload should be separate services because
            -> /streamVideo(user_id, video_id, screen_resolution) {}
